/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/room.glb -t 
*/

import { useGLTF } from "@react-three/drei"
import * as THREE from "three"
import { GLTF } from "three-stdlib"

type GLTFResult = GLTF & {
  nodes: {
    Object_1002: THREE.Mesh
    Object_1002_1: THREE.Mesh
    Object_1002_2: THREE.Mesh
    Wall: THREE.Mesh
    Cube055: THREE.Mesh
    Cube055_1: THREE.Mesh
    Floor: THREE.Mesh
    DeskStorage: THREE.Mesh
    FloorSide: THREE.Mesh
    Desk: THREE.Mesh
    Monitor: THREE.Mesh
    Window: THREE.Mesh
    Object_9001: THREE.Mesh
    Object_9001_1: THREE.Mesh
  }
  materials: {
    white_fin_trans: THREE.MeshStandardMaterial
    white_plas: THREE.MeshStandardMaterial
    thread: THREE.MeshStandardMaterial
    ["Material.004"]: THREE.MeshStandardMaterial
    ["05_-_Default"]: THREE.MeshStandardMaterial
    Floor: THREE.MeshStandardMaterial
    Desk: THREE.MeshStandardMaterial
    Metal_Silver_Mat: THREE.MeshStandardMaterial
    Shiny_VarnishPlastic_Black: THREE.MeshPhysicalMaterial
  }
  //   animations: GLTFAction[]
}

export function Room(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("models/room.glb") as GLTFResult

  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Wall.geometry}
        material={materials.white_plas}
        position={[4.867, 3.146, -0.53]}
        rotation={[0, Math.PI / 2, 0]}
      />
      <group position={[5.713, 3.146, -0.53]} rotation={[0, Math.PI / 2, 0]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube055.geometry}
          material={materials["Material.004"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube055_1.geometry}
          material={materials["05_-_Default"]}
        />
      </group>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Floor.geometry}
        material={materials.Floor}
        position={[4.962, 3.146, -0.53]}
        rotation={[0, Math.PI / 2, 0]}
        scale={[1, 1, 1.616]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.DeskStorage.geometry}
        material={nodes.DeskStorage.material}
        position={[4.867, 3.146, -0.53]}
        rotation={[0, Math.PI / 2, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.FloorSide.geometry}
        material={nodes.FloorSide.material}
        position={[4.962, 3.146, -0.53]}
        rotation={[0, Math.PI / 2, 0]}
        scale={[1, 1, 1.616]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Desk.geometry}
        material={materials.Desk}
        position={[4.867, 3.146, -0.53]}
        rotation={[0, Math.PI / 2, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Monitor.geometry}
        material={nodes.Monitor.material}
        position={[5.713, 3.146, -0.53]}
        rotation={[0, Math.PI / 2, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Window.geometry}
        material={nodes.Window.material}
        position={[4.867, 3.146, -0.53]}
        rotation={[0, Math.PI / 2, 0]}
      />
      <group position={[1.161, 2.716, -5.077]} scale={[0.741, 0.741, 0.455]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_9001.geometry}
          material={materials.Metal_Silver_Mat}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_9001_1.geometry}
          material={materials.Shiny_VarnishPlastic_Black}
        />
      </group>
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <group
          position={[4.424, 1.943, 1.592]}
          rotation={[0, 0, 1.586]}
          scale={[0.01, 0.033, 0.033]}
        >
          <group position={[-25.457, 64.678, 34.378]} scale={1.677}>
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Object_1002.geometry}
              material={materials.white_fin_trans}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Object_1002_1.geometry}
              material={materials.white_plas}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Object_1002_2.geometry}
              material={materials.thread}
            />
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload("/room.glb")
